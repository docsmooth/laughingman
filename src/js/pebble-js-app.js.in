// This name is displayed on the configuration title window.
var watch_name = "%(watchName)s";
var show_chrono_dial = %(enableChronoDial)s;
var enable_sweep_seconds = %(enableSweepSeconds)s;
var num_faces = %(numFaces)s;
var num_date_windows = %(numDateWindows)s;
var support_moon = %(supportMoon)s;

// Define the initial config default values.  These defaults are used
// only if the Pebble is connected to the phone at the time of launch;
// otherwise, the defaults in init_default_options() are used instead.
var default_battery_gauge = %(defaultBattery)s;
var default_bluetooth_indicator = %(defaultBluetooth)s;
var default_second_hand = %(enableSecondHand)s;
var default_hour_buzzer = %(enableHourBuzzer)s;
var default_bluetooth_buzzer = 1;
var default_draw_mode = 0;
var default_chrono_dial = 1;
var default_sweep_seconds = 0;
var default_display_lang = 'en_US';
var default_face_index = 0;
var default_date_windows = %(defaultDateWindows)s;
var default_lunar_background = 0;
var default_lunar_direction = 0;

var battery_gauge;
var bluetooth_indicator;
var second_hand;
var hour_buzzer;
var bluetooth_buzzer;
var draw_mode;
var chrono_dial;
var sweep_seconds;
var display_lang;
var face_index;
var date_windows;
var lunar_background;
var lunar_direction;

var display_lang_lookup = {
%(displayLangLookup)s
};

function sent_ack(e) {
    console.log("Message sent");
}

function sent_nack(e) {
    console.log("Message not sent: " + e.error);
    //console.log(e.error.message);
}

function logLocalStorage() {
    var keys = Object.keys(localStorage);
    console.log("  localStorage = {");
    for (var key in keys) {
	console.log('      "' + keys[key] + '" : ' + localStorage[keys[key]] + ',');
    }
    console.log("  }");
}

function getIntFromStorage(keyword, default_value) {
    var value = localStorage.getItem(watch_name + ":" + keyword);
    if (!value) {
	value = default_value;
    }
    value = parseInt(value);
    if (isNaN(value)) {
	value = default_value;
    }

    console.log("   " + keyword + ": " + value);
    return value;
}

function getStringFromStorage(keyword, default_value) {
    var value = localStorage.getItem(watch_name + ":" + keyword);
    if (!value) {
	value = default_value;
    }

    console.log("   " + keyword + ": '" + value + "'");
    return value;
}

var initialized = false;
function initialize() {
    console.log("initialize: " + initialized);
    if (initialized) {
	return;
    }

    logLocalStorage();

    battery_gauge = getIntFromStorage('battery_gauge', default_battery_gauge);
    bluetooth_indicator = getIntFromStorage('bluetooth_indicator', default_bluetooth_indicator);
    second_hand = getIntFromStorage('second_hand', default_second_hand);
    hour_buzzer = getIntFromStorage('hour_buzzer', default_hour_buzzer);
    bluetooth_buzzer = getIntFromStorage('bluetooth_buzzer', default_bluetooth_buzzer);
    draw_mode = getIntFromStorage('draw_mode', default_draw_mode);
    chrono_dial = getIntFromStorage('chrono_dial', default_chrono_dial);
    sweep_seconds = getIntFromStorage('sweep_seconds', default_sweep_seconds);
    display_lang = getStringFromStorage('display_lang', default_display_lang);
    face_index = getIntFromStorage('face_index', default_face_index);
    date_windows = [];
    for (var i = 0; i < num_date_windows; ++i) {
	var sym = 'date_window_' + String.fromCharCode(97 + i);
	date_windows.push(getIntFromStorage(sym, default_date_windows[i]));
    }
    lunar_background = getIntFromStorage('lunar_background', default_lunar_background);
    lunar_direction = getIntFromStorage('lunar_direction', default_lunar_direction);

    // At startup, send the current configuration to the Pebble--the
    // phone storage keeps the authoritative state.  We delay by 1
    // second to give the Pebble a chance to set itself up for
    // receiving messages.
    setTimeout(function() {
	var configuration = {
	    'battery_gauge' : battery_gauge,
	    'bluetooth_indicator' : bluetooth_indicator,
	    'second_hand' : second_hand,
	    'hour_buzzer' : hour_buzzer,
	    'bluetooth_buzzer' : bluetooth_buzzer,
	    'draw_mode' : draw_mode,
	    'chrono_dial' : chrono_dial,
	    'sweep_seconds' : sweep_seconds,
	    'display_lang' : display_lang_lookup[display_lang],
	    'face_index' : face_index,
	    'lunar_background' : lunar_background,
	    'lunar_direction' : lunar_direction,
	};
	for (var i = 0; i < num_date_windows; ++i) {
	    var sym = 'date_window_' + String.fromCharCode(97 + i);
	    configuration[sym] = date_windows[i];
	}
   	console.log("sending init config: " + JSON.stringify(configuration));
	Pebble.sendAppMessage(configuration, sent_ack, sent_nack);
    }, 1000)
}

Pebble.addEventListener("ready", function(e) {
    console.log("ready");
    initialize();
});

Pebble.addEventListener("showConfiguration", function(e) {
    console.log("showConfiguration starting");
    initialize();
    var url = "http://www.totalnetsolutions.net/pebble/laughingman_2_9_configure.html?watch_name=" + encodeURIComponent(watch_name) + "&battery_gauge=" + battery_gauge + "&bluetooth_indicator=" + bluetooth_indicator + "&second_hand=" + second_hand + "&hour_buzzer=" + hour_buzzer + "&bluetooth_buzzer=" + bluetooth_buzzer + "&draw_mode=" + draw_mode + "&display_lang=" + display_lang + "&face_index=" + face_index + "&num_faces=" + num_faces + "&num_date_windows=" + num_date_windows;
    if (show_chrono_dial) {
	url += "&chrono_dial=" + chrono_dial;
    }
    if (support_moon) {
	url += "&support_moon=1&lunar_background=" + lunar_background + "&lunar_direction=" + lunar_direction;
    }
    if (enable_sweep_seconds) {
	url += "&sweep_seconds=" + sweep_seconds;
    }
    for (var i = 0; i < num_date_windows; ++i) {
	var sym = 'date_window_' + String.fromCharCode(97 + i);
	url += "&" + sym + "=" + date_windows[i];
    }
    console.log("showConfiguration: " + url);
    var result = Pebble.openURL(url);
    console.log("openURL result: " + result);
});

Pebble.addEventListener("webviewclosed", function(e) {
    console.log("Configuration window closed");
    console.log(e.type);
    console.log(e.response);

    if (e.response && e.response != 'CANCELLED') {
	// Get the configuration from the webpage
	var configuration = JSON.parse(e.response);

	// And record the longterm storage in the phone app.
	battery_gauge = configuration["battery_gauge"];
	localStorage.setItem(watch_name + ":battery_gauge", battery_gauge);
	
	bluetooth_indicator = configuration["bluetooth_indicator"];
	localStorage.setItem(watch_name + ":bluetooth_indicator", bluetooth_indicator);
	
	second_hand = configuration["second_hand"];
	localStorage.setItem(watch_name + ":second_hand", second_hand);
	
	hour_buzzer = configuration["hour_buzzer"];
	localStorage.setItem(watch_name + ":hour_buzzer", hour_buzzer);
	
	bluetooth_buzzer = configuration["bluetooth_buzzer"];
	localStorage.setItem(watch_name + ":bluetooth_buzzer", bluetooth_buzzer);
	
	draw_mode = configuration["draw_mode"];
	localStorage.setItem(watch_name + ":draw_mode", draw_mode);
	
	chrono_dial = configuration["chrono_dial"];
	localStorage.setItem(watch_name + ":chrono_dial", chrono_dial);
	
	sweep_seconds = configuration["sweep_seconds"];
	localStorage.setItem(watch_name + ":sweep_seconds", sweep_seconds);
	
	display_lang = configuration["display_lang"];
	localStorage.setItem(watch_name + ":display_lang", display_lang);

	face_index = configuration["face_index"];
	localStorage.setItem(watch_name + ":face_index", face_index);

	date_windows = [];
	for (var i = 0; i < num_date_windows; ++i) {
	    var sym = 'date_window_' + String.fromCharCode(97 + i);
	    date_windows.push(configuration[sym]);
	    localStorage.setItem(watch_name + ":" + sym, date_windows[i]);
	}

	lunar_background = configuration["lunar_background"];
	localStorage.setItem(watch_name + ":lunar_background", lunar_background);

	lunar_direction = configuration["lunar_direction"];
	localStorage.setItem(watch_name + ":lunar_direction", lunar_direction);

	// Finally, massage any elements as needed for Pebble's
	// storage conventions (which are slightly different than the
	// JS conventions--in particular, the display_lang string
	// id is converted to a one-byte integer).
	configuration['display_lang'] = display_lang_lookup[display_lang]

	// And send it on to Pebble.
	console.log("sending runtime config: " + JSON.stringify(configuration));
	Pebble.sendAppMessage(configuration, sent_ack, sent_nack);

	logLocalStorage();
    }
});
